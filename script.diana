; Diana is a config language
; It has two modes: simple and script.
; Script mode is a functional logic language

; Diana's file structure is like this:
; Implicit Default Export:
; zero or more let binding
; zero or one final expression (the default export)
; Explicit Named Export:
; one or more let binding. `export let xx` is exported with the name `xx`

; import module
let m = import("./simple")

; Binding
let varname = 123
let funcAdd(a: Int, b: Int) = a + b ; function??
let annotated: int = 123 # type annotation is supported

let interpolation = "Hello {name}"
let escaped = "escape using \\, \", \{\}"

; list

let spread = [
  ...list,
  1, 2, 3, ; trailing comma is required
]
let multiLineSpread =
  * 1
  * 2
  ...spread ; clear context

; wrong. spread requires clear context
; let spreaded =
;   ...spread ;

; list comprehension
; it cannot be mixed with other list elements
let comprehension = [
  num * 810
  for item in list
  if item
]

; object enhancement
let object =
  optional?: value
  defaultVal: bound = value ; default value will be overridden when merging
  key:
    nested: value
 nested.path.in.object: 42
 [dynamicKey]: dynamicValue
 ...spread

let objComprehension = {
   [key]: value
   for key, value in
   keyedContainer
   if key == "42"
}
let shortHand = { x, y, z, a.b.c }

let field = object.key
let optionalChain = object.optional?.something

; spreading allow override bound and add new fields
let newUser = {
  ...billy,
  firstName: 334,
}

; function literal
let func = \a b c ->
  let aSquare = a * a
  let bSquare = b * b
  let cSquare = c * c
  aSquare + bSquare + cSquare
let funcAnnotation = \(a: Int, b: Int) ->
  a + b
let funcDestructuring = \({a, b}: Struct, [e, tail]: List(Int)) ->
  ree
let shorthandParam = \$0.name
let applied = func(1, 2, 3) ; 1 + 4 + 9 = 14

; combine together!
* numField: 123
  field.nested.inner: 123
  nested:
    test
* func: \a b c d ->
    test
  num: 123
* test
  func: \ a b c d ->
    wewe
  nested.nested.nested:
    * 1
    * 2
    * 3

; set
let numSet = set([1,2,3,4])
let setLiteral = %[1,2,3,4] ; what about sorted set?
; tuple?
let tuple = (1, 2, 3)
let tupleLiteral =
  ~ a
  ~ b
  ~ c
  ~ d


; conditional
; no early return in if/else
; too imperative
let ifElse =
  if a then b else c
let mutlilineConditional =
  if test
    a
  else
    b

; pattern matching
let matchExpr = match test
  String -> 'String'
  b @ Int -> 123 + b  ; pattern binding
  Struct {age} -> age
  Bool ->
    nested: value
    also: works
  (first, second) -> 'tuple works'
  else 123

; named export
export let secret = 114514
export let meaning = 42
; default export
export expr
export
  field: value
  field: value

; keyword
;;;
from import export let match if then else
for in
;;;

; builtin type
;;;
i8 i16 i32 i64 i128
u8 u16 u32 u64 u128
f32 f64
;;;


type IP = (u8, u8, u8, u8)
type PrivateIP =
  | #IP(10, ...(u8, u8, u8))
  | #IP(192, 168, ...(u8, u8))
  | #IP(172, >=16 & <= 32, ...(u8, u8))

myIP: #PrivateIP( 10, 2, 3, 4 )
yourIP: #PrivateIP(11, 1, 2, 3)

; term and type are similar
type Name = string

; union type
type Direction =
  | "North"
  | "East"
  | "West"
  | "South"
; intersection type
type Travel = { direction: Direction } & { mileage: int }

; every term value can have another type value as bound
type User =
  firstName: string ; bound
  lastName: string ; bound
  fullName: "{firstName} {lastName}" ; computed bound
  age: int  ;bound
  isUnderAge: age < 21 ; computed bound
  isVip: boolean ; bound

; refinement, no new field can be added
type VipUser = #User
  isVip: true
; & intersection can add new fields
; & will report error if fields conflict
type AddField = User & Basic & {
  moreField: string
}

; term can be computed, type cannot be computed
type bar = > 60 ; ok
; let higherBar = bar + 30 ; wrong! bound cannot be computed

; refined to a value
; every field must be instantiated
let mary = #VipUser
  firstName: 'Mary'
  lastName: 'Smith'
  age: 23

; multiple refinement, latter fields will override former fields
let billy = #User#isVip
  firstName: 'Mary'
  lastName: 'Smith'
  age: 23

let youCanRefineValue = #billy#mary

; single argument function returning bool can be type
; this is called refinement type
let isEven(n: int): bool = n % 2 == 0
let two: isEven = 2 ; ok
; let three: isEven = 3 ; wrong

;;;
However, function refinement type is eliminated when used
let isSmallEven(a: isEven) =
  if a < 10
    true
  else
    isSmallEven(a - 2) # this will not report error when compile!

We can check this by using SMT solver like F*.
But I don't think we have the effort or audience will understand this shenanigans
Reference:
https://www.fstar-lang.org/tutorial/proof-oriented-programming-in-fstar.pdf

Verse just eliminate refinement to their upper bound
https://brianmckenna.org/blog/verse_types

Idris don't use refinement type but instead dependent type
If we were Idris, the program will be written like this:
We need a proposition to encode the N is even.
let isEven[N: Nat](n: N): Proposition = Parity[N] == Even
Too Bad for DX.
;;;
